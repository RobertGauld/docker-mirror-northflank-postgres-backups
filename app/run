#!/usr/bin/env ruby

require 'dotenv'
require 'fileutils'
require 'logger'
require 'open-uri'
require 'parallel'
require 'json'


# Load configuration
Dotenv.load # defaults to '.env'
Dotenv.require_keys('NORTHFLANK_AUTH_TOKEN')
THREADS = ENV.fetch('THREADS', 4).to_i
NORTHFLANK_AUTH_TOKEN = ENV.fetch('NORTHFLANK_AUTH_TOKEN')
DESTINATION = File.expand_path(ENV.fetch('DESTINATION', '/media/destination'))
EXCLUDE_PROJECTS = ENV.fetch('EXCLUDE_PROJECTS', '').split(',').map(&:strip).freeze


# Configure the app wide logger
$logger = Logger.new(STDOUT)
$logger.formatter = proc do |severity, datetime, progname, message|
  if Thread.current.thread_variable_get(:logger_label)
    message = "#{Thread.current.thread_variable_get(:logger_label)} - #{message}"
  end
  "#{datetime} #{severity} #{progname}: #{message}\n"
end
$logger.level = ENV['LOG_LEVEL']&.to_i || Logger::INFO


$logger.info 'Loaded configuration'
$logger.debug "NorthFlank auth token: #{ENV['NORTHFLANK_AUTH_TOKEN'] ? 'present' : 'absent!'}"
$logger.debug "Using #{THREADS} threads."
$logger.debug "Saving to: #{DESTINATION}"
$logger.debug "Excluding #{EXCLUDE_PROJECTS.count} projects: #{EXCLUDE_PROJECTS.join(', ')}"


# Get data
$logger.debug 'Fetching list of projects.'
projects = JSON.parse(URI.open('https://api.northflank.com/v1/projects', 'Authorization' => "Bearer #{NORTHFLANK_AUTH_TOKEN}").read)
               .fetch('data').fetch('projects')
$logger.info "Found #{projects.count} projects: #{projects.map { _1.fetch('name') }.join(', ')}"

$logger.debug 'Fetching list of postgres addons.'
databases = Parallel.map(projects, in_threads: THREADS) do |project|
  if EXCLUDE_PROJECTS.include? project.fetch('id')
    $logger.debug "Skipping #{project['name']} as it's in the exclude projects list."
    next nil
  end

  items = JSON.parse(URI.open("https://api.northflank.com/v1/projects/#{project.fetch('id')}/addons", 'Authorization' => "Bearer #{NORTHFLANK_AUTH_TOKEN}").read)
              .fetch('data').fetch('addons')
              .select { _1.dig('spec', 'type') == 'postgres' }
              .map { _1.merge 'project' => project }
  $logger.info "Found #{items.count} postgres addons for #{project['name']}"
  items
end.reject(&:empty?).flatten

$logger.debug 'Fetching list of backups.'
backups = Parallel.map(databases, in_threads: THREADS) do |database|
  items = JSON.parse(URI.open("https://api.northflank.com/v1/projects/#{database.fetch('project').fetch('id')}/addons/#{database.fetch('name')}/backups", 'Authorization' => "Bearer #{NORTHFLANK_AUTH_TOKEN}").read)
              .fetch('data').fetch('backups')
              .each do |item|
                item['database'] = database
                item['createdAt'] = Time.parse(item.fetch('createdAt'))
                item['fileName'] = if item['name'].match?(/\A\d{2}\/\d{2}\/\d{4} \d{2}:\d{2} UTC\Z/)
                                     "#{item.fetch('createdAt').strftime('%Y-%m-%d_%H%M')}.dump"
                                   else
                                     item.fetch('name') + '.dump'
                                   end
                end
  $logger.info "Found #{items.count} backups for #{database.dig('project', 'name')} → #{database['name']}"
  items
end.flatten


$logger.info 'Downloading databases'
Parallel.each(backups, in_threads: THREADS) do |backup|
  database = backup.fetch('database')
  project = database.fetch('project')

  Thread.current.thread_variable_set(:logger_label, "#{project['id']}--#{database['id']}--#{backup['id']}")

  file_name = File.join(
    DESTINATION,
    project.fetch('name'),
    database.fetch('name'),
    backup.fetch('fileName')
  )

  FileUtils.mkdir_p(File.dirname(file_name))

  if File.exist?(file_name)
    $logger.debug "Skipping download - #{file_name} exists."
    next
  end

  $logger.info "Downloading #{project['name']} → #{database['name']} → #{backup['name']}."
  download_url = JSON.parse(URI.open("https://api.northflank.com/v1/projects/#{project.fetch('id')}/addons/#{database.fetch('name')}/backups/#{backup.fetch('id')}/download-link", 'Authorization' => "Bearer #{NORTHFLANK_AUTH_TOKEN}").read)
                     .fetch('data').fetch('downloadLink')
  $logger.debug "Downloading to #{file_name}"
  $logger.debug "Downloading from #{download_url}"

  download = URI(download_url).open
  if download.is_a?(StringIO)
    IO.copy_stream(download, file_name)
  else
    FileUtils.mv(download.path, file_name)
  end
end


$logger.info 'Deleting removed files'
source_files = backups.map { File.join _1.fetch('database').fetch('project').fetch('name'), _1.fetch('database').fetch('name'), _1.fetch('fileName') }

Dir.foreach(DESTINATION) do |project_directory|
  next if project_directory.eql?('.') || project_directory.eql?('..')
  next unless File.directory?(File.join(DESTINATION, project_directory))
  next unless projects.reject { EXCLUDE_PROJECTS.include? _1['id'] }.map { _1['name'] }.include? project_directory

  Dir.foreach(File.join(DESTINATION, project_directory)) do |database_directory|
    next if database_directory.eql?('.') || database_directory.eql?('..')
    next unless File.directory?(File.join(DESTINATION, project_directory, database_directory))

    # We now have a directory which should contain backup files
    Dir.foreach(File.join(DESTINATION, project_directory, database_directory)) do |entry|
      next if entry.eql?('.') || entry.eql?('..')
      file_name = File.join project_directory, database_directory, entry
      next unless File.file? File.join(DESTINATION, file_name)

      # We now have what should be a dump file
      next if source_files.include? file_name

      # We now have a file which doesn't exist in source
      $logger.debug "Deleting #{file_name}"
      File.unlink(File.join(DESTINATION, file_name))
    end

    # Remove directory if it's empty
    if Dir.foreach(File.join(DESTINATION, project_directory, database_directory)).count == 2
      $logger.info "Deleting empty database directory #{database_directory}"
      Dir.unlink File.join(DESTINATION, project_directory, database_directory)
    end
  end

  # Remove directory if it's empty
  if Dir.foreach(File.join(DESTINATION, project_directory)).count == 2
    $logger.info "Deleting empty project directory #{project_directory}"
    Dir.unlink File.join(DESTINATION, project_directory)
  end
end

